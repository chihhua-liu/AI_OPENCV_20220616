import cv2
import os
import matplotlib.pyplot as plt

print(os.getcwd())
BARCODE_FILE1 = 'images/barcode_sample.jpg'
originalImage = cv2.imread(BARCODE_FILE1)
data, bbox, extractedImage = cv2.QRCodeDetector().detectAndDecode(originalImage)
print(type(data))
print(type(bbox), bbox.shape)
print(type(extractedImage))
print(f"bar code content={data}, bbox={bbox}")
#cv2.imshow("image extract from cv2", extractedImage)
~~~~~~~~~~~~~~~~~~~~~~~~~
import cv2
import os
from matplotlib import pyplot

print(os.getcwd())
BARCODE_FILE1 = 'images/barcode_sample.jpg'
originalImage = cv2.imread(BARCODE_FILE1)
data, bbox, extractedImage = cv2.QRCodeDetector().detectAndDecode(originalImage)
print(type(data))
print(type(bbox), bbox.shape)
print(type(extractedImage))
print(f"bar code content={data}, bbox={bbox}")
cv2.imshow("original image", originalImage)
cv2.imshow("image extract from cv2", extractedImage)

OUTPUT_FILE = 'images/barcode_annotated.jpg'
def drawBBox(originalImage, bbox, barcodeData):
    COLOR1 = (128, 128, 0)
    p1 = (bbox[0][0][0], bbox[0][0][1])
    p2 = (bbox[0][1][0], bbox[0][1][1])
    p3 = (bbox[0][2][0], bbox[0][2][1])
    p4 = (bbox[0][3][0], bbox[0][3][1])
    cv2.line(originalImage, p1, p2, COLOR1, 2)
    cv2.line(originalImage, p2, p3, COLOR1, 2)
    cv2.line(originalImage, p3, p4, COLOR1, 2)
    cv2.line(originalImage, p4, p1, COLOR1, 2)
    cv2.imwrite(OUTPUT_FILE, originalImage)
    pyplot.imshow(originalImage)
    pyplot.title(f"barcode:{barcodeData} with bounding box")
    pyplot.show()


if data != None:
    drawBBox(originalImage, bbox, data)
else:
    print("QR code not Detected")
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
pip install pyzbar
demo18


from pyzbar import pyzbar
import numpy as np
import cv2

FILENAME = 'images/sample.png'


def decode(image):
    decodedObjects = pyzbar.decode(image)
    print(type(decodedObjects))
    for item in decodedObjects:
        print(type(item))
        print(f'type={item.type},data={item.data}')
    return decodedObjects


image = cv2.imread(FILENAME)
decoded = decode(image)


https://cs.nyu.edu/~mohri/mlbook/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
from pyzbar import pyzbar
import numpy as np
import cv2
from pprint import pprint

FILENAME = 'images/sample.png'


def decode(image):
    decodedObjects = pyzbar.decode(image)
    print(type(decodedObjects))
    for item in decodedObjects:
        # print(type(item))
        # pprint(dir(item))
        print(f'type={item.type},data={item.data}')
    return decodedObjects


def display(image, decoded):
    for d in decoded:
        points = d.polygon
        hull = points
        hull_length = len(hull)
        print(hull_length)
        for i in range(0, hull_length):
            cv2.line(image, hull[i], hull[(i + 1) % hull_length], (255, 0, 128), 3)
    cv2.imshow("result", image)
    cv2.waitKey(0)


image = cv2.imread(FILENAME)
decoded = decode(image)
display(image, decoded)


demo19
import cv2
from matplotlib import pyplot
FILENAME = 'images/grayscale1.jpg'

sourceImage = cv2.imread(FILENAME, cv2.IMREAD_GRAYSCALE)
# cv2.imshow("original image", sourceImage)
# cv2.waitKey(0)
pyplot.imshow(sourceImage)
pyplot.show()
~~~~~~~~~~~~~~~~~~~~~~~~~~~
import cv2
from matplotlib import pyplot
import time

FILENAME = 'images/grayscale1.jpg'

sourceImage = cv2.imread(FILENAME, cv2.IMREAD_GRAYSCALE)
# cv2.imshow("original image", sourceImage)
# cv2.waitKey(0)

THRESHOLD_VALUE = 50
maxValue = 255


def thresholdUsingLoop(image, threshold, max):
    dst = image.copy()
    print(image.shape[:2])
    height, width = image.shape[:2]
    for i in range(height):
        for j in range(width):
            if sourceImage[i, j] > threshold:
                dst[i, j] = maxValue
            else:
                dst[i, j] = 0
    return dst


pyplot.imshow(sourceImage)
startTime = time.time()
binaryImage = thresholdUsingLoop(sourceImage, THRESHOLD_VALUE, maxValue)
endTime = time.time()
print(f"it took {endTime - startTime} to do threshold")
pyplot.show()
pyplot.subplot(121)
pyplot.title("original image")
pyplot.imshow(sourceImage, cmap='gray', vmin=0, vmax=255)
pyplot.subplot(122)
pyplot.title("binary image")
pyplot.imshow(binaryImage, cmap='gray', vmin=0, vmax=255)
pyplot.show()
~~~~~~~~~~~~~~~~~~~~~~~~
import cv2
from matplotlib import pyplot
import time

FILENAME = 'images/grayscale1.jpg'

sourceImage = cv2.imread(FILENAME, cv2.IMREAD_GRAYSCALE)
# cv2.imshow("original image", sourceImage)
# cv2.waitKey(0)

THRESHOLD_VALUE = 50
MAX_VALUE = 255


def thresholdUsingLoop(image, threshold, v_max):
    dst = image.copy()
    print(image.shape[:2])
    height, width = image.shape[:2]
    for i in range(height):
        for j in range(width):
            if sourceImage[i, j] > threshold:
                dst[i, j] = v_max
            else:
                dst[i, j] = 0
    return dst


pyplot.imshow(sourceImage)
startTime = time.time()
binaryImage = thresholdUsingLoop(sourceImage, THRESHOLD_VALUE, MAX_VALUE)
endTime = time.time()
print(f"it took {endTime - startTime} to do threshold")
pyplot.show()
pyplot.subplot(121)
pyplot.title("original image")
pyplot.imshow(sourceImage, cmap='gray', vmin=0, vmax=255)
pyplot.subplot(122)
pyplot.title("binary image")
pyplot.imshow(binaryImage, cmap='gray', vmin=0, vmax=255)
pyplot.show()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import cv2
from matplotlib import pyplot
import time
import numpy as np

FILENAME = 'images/grayscale1.jpg'

sourceImage = cv2.imread(FILENAME, cv2.IMREAD_GRAYSCALE)
# cv2.imshow("original image", sourceImage)
# cv2.waitKey(0)

THRESHOLD_VALUE = 50
MAX_VALUE = 255


def thresholdUsingVector(image, threshold, v_max):  # 15.91
    dst = np.zeros_like(image)
    print(type(image), type(dst))
    print(image.shape, dst.shape)
    maxPixels = image > threshold
    zeroPixels = image < threshold
    dst[maxPixels] = v_max
    dst[zeroPixels] = 0
    return dst


pyplot.imshow(sourceImage)
startTime = time.time()
binaryImage = thresholdUsingVector(sourceImage, THRESHOLD_VALUE, MAX_VALUE)
endTime = time.time()
print(f"it took {endTime - startTime} to do threshold")
pyplot.show()
pyplot.subplot(121)
pyplot.title("original image")
pyplot.imshow(sourceImage, cmap='gray', vmin=0, vmax=255)
pyplot.subplot(122)
pyplot.title("binary image")
pyplot.imshow(binaryImage, cmap='gray', vmin=0, vmax=255)
pyplot.show()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import cv2
from matplotlib import pyplot
import time
import numpy as np

FILENAME = 'images/grayscale1.jpg'

sourceImage = cv2.imread(FILENAME, cv2.IMREAD_GRAYSCALE)
# cv2.imshow("original image", sourceImage)
# cv2.waitKey(0)

THRESHOLD_VALUE = 50
MAX_VALUE = 255

# def thresholdUsingVector(image, threshold, v_max):  # 0.022
#     dst = np.zeros_like(image)
#     print(type(image), type(dst))
#     print(image.shape, dst.shape)
#     maxPixels = image > threshold
#     zeroPixels = image < threshold
#     dst[maxPixels] = v_max
#     dst[zeroPixels] = 0
#     return dst


pyplot.imshow(sourceImage)
startTime = time.time()
threshold_return, binaryImage = cv2.threshold(sourceImage, THRESHOLD_VALUE, MAX_VALUE, cv2.THRESH_BINARY)
# binaryImage = thresholdUsingVector(sourceImage, THRESHOLD_VALUE, MAX_VALUE)
endTime = time.time()
print(f"it took {endTime - startTime} to do threshold")
pyplot.show()
pyplot.subplot(121)
pyplot.title("original image")
pyplot.imshow(sourceImage, cmap='gray', vmin=0, vmax=255)
pyplot.subplot(122)
pyplot.title("binary image")
pyplot.imshow(binaryImage, cmap='gray', vmin=0, vmax=255)
pyplot.show()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Terminal
pip install ipython


import cv2
from matplotlib import pyplot
import time
import numpy as np
FILENAME = 'images/grayscale1.jpg'
sourceImage = cv2.imread(FILENAME, cv2.IMREAD_GRAYSCALE)
THRESHOLD_VALUE = 200
MAX_VALUE = 255


cv2.threshold(sourceImage, THRESHOLD_VALUE, MAX_VALUE, cv2.THRESH_BINARY)

%timeit cv2.threshold(sourceImage, THRESHOLD_VALUE, MAX_VALUE, cv2.THRESH_BINARY)


https://docs.opencv.org/master/d7/d1b/group__imgproc__misc.html#gae8a4a146d1ca78c626a53577199e9c57


import cv2
from matplotlib import pyplot
import time
import numpy as np

FILENAME = 'images/grayscale1.jpg'

sourceImage = cv2.imread(FILENAME, cv2.IMREAD_GRAYSCALE)

THRESHOLD_VALUE = 200
MAX_VALUE = 255

THRESHOLDS = [cv2.THRESH_BINARY, cv2.THRESH_BINARY_INV, cv2.THRESH_TRUNC, cv2.THRESH_TOZERO, cv2.THRESH_TOZERO_INV]
resultImages = []
for i, t in enumerate(THRESHOLDS):
    print(f"[{i}],threshold={t}")
    _, resultImg = cv2.threshold(sourceImage, THRESHOLD_VALUE, MAX_VALUE, t)



~~~~~~~~~~~~~~~~~~~~~~~~
import cv2
from matplotlib import pyplot as plt
import time
import numpy as np

FILENAME = 'images/grayscale1.jpg'

sourceImage = cv2.imread(FILENAME, cv2.IMREAD_GRAYSCALE)

THRESHOLD_VALUE = 128
MAX_VALUE = 255

THRESHOLDS = [cv2.THRESH_BINARY, cv2.THRESH_BINARY_INV, cv2.THRESH_TRUNC, cv2.THRESH_TOZERO, cv2.THRESH_TOZERO_INV]
resultImages = []
for i, t in enumerate(THRESHOLDS):
    print(f"[{i}],threshold={t}")
    _, resultImg = cv2.threshold(sourceImage, THRESHOLD_VALUE, MAX_VALUE, t)
    resultImages.append(resultImg)
    # resultImages += [resultImg]
print(len(resultImages))
plt.subplot(2, 3, 1)
plt.title('original image')
plt.imshow(sourceImage, cmap='gray', vmin=0, vmax=255)
plt.subplot(2, 3, 2)
plt.title('binary threshold image')
plt.imshow(resultImages[0], cmap='gray', vmin=0, vmax=255)
plt.subplot(2, 3, 3)
plt.title('binary threshold inverse image')
plt.imshow(resultImages[1], cmap='gray', vmin=0, vmax=255)
plt.subplot(2, 3, 4)
plt.title('binary threshold truncate')
plt.imshow(resultImages[2], cmap='gray', vmin=0, vmax=255)
plt.subplot(2, 3, 5)
plt.title('binary threshold zero')
plt.imshow(resultImages[3], cmap='gray', vmin=0, vmax=255)
plt.subplot(2, 3, 6)
plt.title('binary threshold zero inverse')
plt.imshow(resultImages[4], cmap='gray', vmin=0, vmax=255)


plt.show()


~~~~~~~~~~~~~~~~~~~~~~~~
demo23

import cv2
from matplotlib import pyplot as plt
import time
import numpy as np

FILENAME = 'images/grayscale1.jpg'

sourceImage = cv2.imread(FILENAME, cv2.IMREAD_GRAYSCALE)

THRESHOLD_VALUE = 128
MAX_VALUE = 255
th, ret1 = cv2.threshold(sourceImage, THRESHOLD_VALUE, MAX_VALUE, cv2.THRESH_BINARY)
ret2 = cv2.adaptiveThreshold(sourceImage, MAX_VALUE, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 23, 9)
ret3 = cv2.adaptiveThreshold(sourceImage, MAX_VALUE, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 23, 9)
print(type(ret2), type(ret3))
print(ret2.shape, ret3.shape, ret1.shape)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
demo23'
import cv2
from matplotlib import pyplot as plt
import time
import numpy as np

FILENAME = 'images/grayscale1.jpg'

sourceImage = cv2.imread(FILENAME, cv2.IMREAD_GRAYSCALE)

THRESHOLD_VALUE = 128
MAX_VALUE = 255
th, ret1 = cv2.threshold(sourceImage, THRESHOLD_VALUE, MAX_VALUE, cv2.THRESH_BINARY)
ret2 = cv2.adaptiveThreshold(sourceImage, MAX_VALUE, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 23, 9)
ret3 = cv2.adaptiveThreshold(sourceImage, MAX_VALUE, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 23, 9)
print(type(ret2), type(ret3))
print(ret2.shape, ret3.shape, ret1.shape)
titles = ['original',
          'global threshold=%d' % THRESHOLD_VALUE,
          'adaptive mean with blocksize=23, c=9',
          'adaptive gaussian with blocksize=23, c=9']
images = [sourceImage, ret1, ret2, ret3]
for i in range(len(images)):
    plt.subplot(2, 2, i + 1)
    plt.imshow(images[i], 'gray')
    plt.title(titles[i])
    plt.xticks([])
    plt.yticks([])
plt.show()


23,9
23,19
23,5
3,9
43,9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
demo24

import cv2

import matplotlib.pyplot as plt

kernels = [cv2.MORPH_RECT, cv2.MORPH_ELLIPSE, cv2.MORPH_CROSS]

plt.figure(figsize=[15, 15])
for i, k in zip([1, 2, 3], kernels):
    a1 = cv2.getStructuringElement(k, (15, 15))
    plt.subplot(1, 3, i)
    plt.imshow(a1, 'gray')
    print(a1)
plt.show()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
demo25

import cv2
import matplotlib
from matplotlib import pyplot as plt

matplotlib.rcParams['figure.figsize'] = (6.0, 6.0)
matplotlib.rcParams['image.cmap'] = 'gray'
FILENAME = 'images/morph1.jpg'
image = cv2.imread(FILENAME)
plt.imshow(image)
plt.show()

ksize = (5, 5) # change this
kernel1 = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, ksize)
plt.imshow(kernel1)
plt.show()

morphedImage = cv2.erode(image, kernel1)
morphedImage = cv2.erode(morphedImage, kernel1)

plt.figure(figsize=[15, 9])
plt.subplot(1, 2, 1)
plt.imshow(image)
plt.subplot(1, 2, 2)
plt.imshow(morphedImage)
plt.show()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import cv2
import matplotlib
from matplotlib import pyplot as plt

matplotlib.rcParams['figure.figsize'] = (6.0, 6.0)
matplotlib.rcParams['image.cmap'] = 'gray'
FILENAME = 'images/morph1.jpg'
image = cv2.imread(FILENAME)
plt.imshow(image)
#plt.show()

ksize = (9, 9)
kernel1 = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, ksize)
plt.imshow(kernel1)
#plt.show()

morphedImage = cv2.dilate(image, kernel1)
morphedImage = cv2.dilate(morphedImage, kernel1)
#morphedImage = cv2.erode(morphedImage, kernel1)

plt.figure(figsize=[15, 9])
plt.subplot(1, 2, 1)
plt.imshow(image)
plt.subplot(1, 2, 2)
plt.imshow(morphedImage)
plt.show()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import cv2
import matplotlib
from matplotlib import pyplot as plt

matplotlib.rcParams['figure.figsize'] = (6.0, 6.0)
matplotlib.rcParams['image.cmap'] = 'gray'
FILENAME = 'images/morph1.jpg'
image = cv2.imread(FILENAME)
plt.imshow(image)
#plt.show()

ksize = (9, 9)
kernel1 = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, ksize)
plt.imshow(kernel1)
#plt.show()

morphedImage = cv2.dilate(image, kernel1)
morphedImage = cv2.erode(morphedImage, kernel1)
for _ in range(10):
    morphedImage = cv2.dilate(morphedImage, kernel1)
    morphedImage = cv2.erode(morphedImage, kernel1)
#morphedImage = cv2.erode(morphedImage, kernel1)

plt.figure(figsize=[15, 9])
plt.subplot(1, 2, 1)
plt.imshow(image)
plt.subplot(1, 2, 2)
plt.imshow(morphedImage)
plt.show()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
demo28

import cv2
import matplotlib
from matplotlib import pyplot as plt

matplotlib.rcParams['figure.figsize'] = (6.0, 6.0)
matplotlib.rcParams['image.cmap'] = 'gray'
FILENAME = 'images/morph1.jpg'
image = cv2.imread(FILENAME)
plt.imshow(image)
# plt.show()
# 3,3, 5,5 , 77, 99
ksize = (9, 9)
kernel1 = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, ksize)
plt.imshow(kernel1)
# plt.show()
# cv2.MORPH_OPEN
morphedImage = image.copy()
for _ in range(20):
    morphedImage = cv2.morphologyEx(morphedImage, cv2.MORPH_CLOSE, kernel1)

plt.figure(figsize=[15, 9])
plt.subplot(1, 2, 1)
plt.imshow(image)
plt.subplot(1, 2, 2)
plt.imshow(morphedImage)
plt.show()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import cv2
import matplotlib
from matplotlib import pyplot as plt

matplotlib.rcParams['figure.figsize'] = (6.0, 6.0)
matplotlib.rcParams['image.cmap'] = 'gray'
FILENAME = 'images/mickey.jpg'
image = cv2.imread(FILENAME)
plt.imshow(image)

ksize = (5, 5)
k1 = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, ksize)
plt.imshow(k1)

morphedImage = image.copy()
morph1 = cv2.morphologyEx(morphedImage, cv2.MORPH_ERODE, k1)
morph2 = cv2.morphologyEx(morphedImage, cv2.MORPH_DILATE, k1)
morph3 = cv2.morphologyEx(morphedImage, cv2.MORPH_GRADIENT, k1)

plt.figure(figsize=[12,6])
plt.subplot(141)
plt.title("original")
plt.imshow(image)
plt.subplot(142)
plt.title("erode")
plt.imshow(morph1)
plt.subplot(143)
plt.title("dilate")
plt.imshow(morph2)
plt.subplot(144)
plt.title("gradient")
plt.imshow(morph3)
plt.show()
